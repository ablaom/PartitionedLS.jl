var documenterSearchIndex = {"docs":
[{"location":"#Partitioned-Least-Squares","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"Linear least squares is one of the most widely used regression methods among scientists in many fields. The simplicity of the model allows this method to be used when data is scarce and it is usually appealing to practitioners that need to gather some insight into the problem by inspecting the values of the learnt parameters. PartitionedLS is a variant of the linear least squares model allowing practitioners to partition the input features into groups of variables that they require to contribute similarly to the final result. ","category":"page"},{"location":"#The-model","page":"Partitioned Least Squares","title":"The model","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"The Partitioned Least Squares model is formally defined as:","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"begingather*\ntextminimize_mathbfalpha mathbfbeta  mathbfX times (mathbfP circ mathbfalpha) times mathbfbeta - mathbfy _2^2 \nbeginaligned\nquad stquad  mathbfalpha  succeq 0\n                    mathbfP^T times mathbfalpha = mathbf1\nendaligned\nendgather*","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"where: ","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"mathbfX is N times M data matrix;\nmathbfP is a user-defined partition matrix having K columns (one for each element of the partition), M rows, and containing 1 in P_ij if the i-th attribute belongs to the j-th partition and 0 otherwise;\nmathbfbeta is a vector weighting the importance of each set of attributes in the partition;\nmathbfalpha is a vector weighting the importance of each attribute within one of the sets in the partition. Note that the constraints imply that for each set in the partition the weights of the corresponding alpha variables are all positive and sum to 1.","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"The PartitionedLS problem is non-convex and NP-complete. The library provides two algorithms to solve the problem anyway: an iterative algorithm based on the Alternating Least Squares approach and an optimal algorithm that guarantees requiring however exponential time in the cardinality of the partition (i.e., it is mainly useful when K is small).","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"More details can be found in the paper Partitioned Least Squares.","category":"page"},{"location":"#To-install-this-library","page":"Partitioned Least Squares","title":"To install this library","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"Just add it as a dependency to your Julia environment. Launch julia from the main directory of your project and enter the following commands:","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"# Opens the package manager REPL\n]\n\n# Activate you local environment (can be skipped if you want to install the library globally)\nactivate .\n\n# Adds the library to the environment\nadd PartitionedLS","category":"page"},{"location":"#To-use-this-library","page":"Partitioned Least Squares","title":"To use this library","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"You will need a matrix P describing the partitioning of your variables, e.g.:","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"P = [[1 0]; \n     [1 0]; \n     [0 1]]","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"specifies that the first and the second variable belongs to the first partition, while the third variable belongs to the second.","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"You have then the choice to use either the standard interface or the MLJ interface. ","category":"page"},{"location":"#Standard-interface","page":"Partitioned Least Squares","title":"Standard interface","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"The standard interface defines a fit function for each of the implemented algorithms. The function returns a tuple containing:","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"a PartLSFitResult object containing the model and the parameters found by the algorithm;\nnothing (this is mandated by the MLJ interface, but it is not used in this case).\na NamedTuple containing some additional information.","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"A complete example:","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"\nusing PartitionedLS\n\nX = [[1. 2. 3.]; \n     [3. 3. 4.]; \n     [8. 1. 3.]; \n     [5. 3. 1.]]\n\ny = [1.; \n     1.; \n     2.; \n     3.]\n\nP = [[1 0]; \n     [1 0]; \n     [0 1]]\n\n\n# fit using the optimal algorithm \nresult = fit(Opt, X, y, P, η = 0.0)\n\n\n# Make predictions on the given data matrix. The function works\n# with results returned by anyone of the solvers.\npredict(result[1], X)","category":"page"},{"location":"#MLJ-interface","page":"Partitioned Least Squares","title":"MLJ interface","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"The MLJ interface is a allows you to use the library in a more MLJ-like fashion. The interface is defined by the PartLS model, which can be used in the MLJ framework. The model can be used in the same way as any other MLJ model.","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"A complete example:","category":"page"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"using MLJ\nusing PartitionedLS\n\nX = [[1. 2. 3.]; \n     [3. 3. 4.]; \n     [8. 1. 3.]; \n     [5. 3. 1.]]\n\ny = [1.;\n     1.;\n     2.;\n     3.]\n\nP = [[1 0]; \n     [1 0]; \n     [0 1]]\n\n# Define the model\n\nmodel = PartLS(P=P, Optimizer=Opt, η=0.0)\n\n# Fit the model\nmach = machine(model, X, y)\nfit!(mach)\n\n# Make predictions\npredict(mach, X)","category":"page"},{"location":"#API-Documentation","page":"Partitioned Least Squares","title":"API Documentation","text":"","category":"section"},{"location":"","page":"Partitioned Least Squares","title":"Partitioned Least Squares","text":"PartLS\nPartLSFitResult\nPartitionedLS.fit\nPartitionedLS.predict\nPartitionedLS.homogeneousCoords\nPartitionedLS.regularizeProblem","category":"page"},{"location":"#PartitionedLS.PartLS","page":"Partitioned Least Squares","title":"PartitionedLS.PartLS","text":"mutable struct PartLS <: Deterministic\n\nThe PartLS struct represents a partitioned least squares model.  Fields are:\n\nOptimizer: the optimization algorithm to use. It can be Opt, Alt or BnB.\nP: the partition matrix. It is a binary matrix where each row corresponds to a partition and each column corresponds to a feature. The element P_{k, i} = 1 if feature i belongs to partition k.\nη: the regularization parameter. It controls the strength of the regularization.\nϵ: the tolerance parameter. It is used to determine when the Alt optimization algorithm has converged. Only used by the Alt algorithm.\nT: the maximum number of iterations. It is used to determine when to stop the Alt optimization algorithm has converged. Only used by the Alt algorithm.\nrng: the random number generator to use. \nIf nothing, the global random number generator rand is used.\nIf an integer, the global number generator rand is used after seeding it with the given integer.\nIf an object of type AbstractRNG, the given random number generator is used.\n\nExample\n\nmodel = PartLS(P=P, Optimizer=Alt, rng=123)\n\n\n\n\n\n","category":"type"},{"location":"#PartitionedLS.PartLSFitResult","page":"Partitioned Least Squares","title":"PartitionedLS.PartLSFitResult","text":"struct PartLSFitResult\n\nThe PartLSFitResult struct represents the solution of the partitioned least squares problem.    It contains the values of the α and β variables, the intercept t and the partition matrix P.\n\nFields\n\nα::Vector{Float64}: The values of the α variables. For each partition k, it holds the values of the α variables are such that sum_i in P_k alpha_k = 1.\n\nβ::Vector{Float64}: The values of the β variables. For each partition k, beta_k is the coefficient that multiplies the features in the k-th partition.\n\nt::Float64: The intercept term of the model.\n\nP::Matrix{Int64}: The partition matrix. It is a binary matrix where each row corresponds to a partition and each column corresponds to a feature. The element P_k i = 1 if feature i belongs to partition k.\n\n\n\n\n\n","category":"type"},{"location":"#MLJModelInterface.fit","page":"Partitioned Least Squares","title":"MLJModelInterface.fit","text":"fit(\n    ::Type{Alt},\n    X::Matrix{Float64},\n    y::Vector{Float64},\n    P::Matrix{Int64};\n    η,\n    ϵ,\n    T,\n    nnlsalg,\n    rng\n) -> Tuple{PartLSFitResult, Nothing, NamedTuple{(:opt,), <:Tuple{Any}}}\n\n\nFits a PartitionedLS model by alternating the optimization of the α and β variables. This version uses  an optimization strategy based on non-negative-least-squaes solvers. This formulation is faster and  more numerically stable with respect to fit(Alt, ...)`.\n\nArguments\n\nX: N  M matrix describing the examples\ny: N vector with the output values for each example\nP: M  K matrix specifying how to partition the M attributes into K subsets. P_mk should be 1 if attribute number m belongs to partition k.\nη: regularization factor, higher values implies more regularized solutions. Default is 0.0.\nT: number of alternating loops to be performed. Default is 100.\nϵ: minimum relative improvement in the objective function before stopping the optimization. Default is 1e-6\nnnlsalg: specific flavour of nnls algorithm to be used, possible values are :pivot, :nnls, :fnnls. Default is :nnls\n\nResult\n\nA Tuple with the following fields:\n\na PartLSFitResult object containing the fitted model\na nothing object\na NamedTuple with a field opt containing the optimal value of the objective function\n\n\n\n\n\nfit(\n    ::Type{Opt},\n    X::Matrix{Float64},\n    y::Vector{Float64},\n    P::Matrix{Int64};\n    η,\n    nnlsalg,\n    returnAllSolutions\n) -> Tuple{PartLSFitResult, Nothing, Any}\n\n\nFits a PartialLS Regression model to the given data and resturns the learnt model (see the Result section).  It uses a coplete enumeration strategy which is exponential in K, but guarantees to find the optimal solution.\n\nArguments\n\nX: N  M matrix describing the examples\ny: N vector with the output values for each example\nP: M  K matrix specifying how to partition the M attributes into K subsets. P_mk should be 1 if attribute number m belongs to\n\npartition k.\n\nη: regularization factor, higher values implies more regularized solutions (default: 0.0)\nreturnAllSolutions: if true an additional output is appended to the resulting tuple containing all solutions found during the algorithm.\nnnlsalg: the kind of nnls algorithm to be used during solving. Possible values are :pivot, :nnls, :fnnls (default: :nnls)\n\nExample\n\nX = rand(100, 10)\ny = rand(100)\nP = [1 0 0; 0 1 0; 0 0 1; 1 1 0; 0 1 1]\nresult = fit(Opt, X, y, P)\n\n\n\n\n\nfit(\n    ::Type{BnB},\n    X::Matrix{Float64},\n    y::Vector{Float64},\n    P::Matrix{Int64};\n    η,\n    nnlsalg\n) -> Tuple{PartLSFitResult, Nothing, NamedTuple{(:opt, :nopen), <:Tuple{Any, Int64}}}\n\n\nImplements the Branch and Bound algorithm to fit a Partitioned Least Squres model.\n\nArguments\n\nX: N  M matrix describing the examples\ny: N vector with the output values for each example\nP: M  K matrix specifying how to partition the M attributes into K subsets. P_mk should be 1 if attribute number m belongs to\n\npartition k.\n\nη: regularization factor, higher values implies more regularized solutions (default: 0.0)\nnnlsalg: the kind of nnls algorithm to be used during solving. Possible values are :pivot, :nnls, :fnnls (default: :nnls)\n\nResult\n\nA tuple with the following fields:\n\na PartLSFitResult object containing the fitted model\na nothing object\na NamedTuple with fields: \nopt containing the optimal value of the objective function\nnopen containing the number of open nodes in the branch and bound tree\n\n\n\n\n\nfit(\n    m::PartLS,\n    verbosity,\n    X,\n    y\n) -> Tuple{PartLSFitResult, Nothing, Any}\n\n\nFits a PartitionedLS Regression model to the given data and resturns the learnt model (see the Result section). It conforms to the MLJ interface.\n\nArguments\n\nm: A PartLS model to fit\nverbosity: the verbosity level\nX: the data matrix\ny: the target vector\n\n\n\n\n\n","category":"function"},{"location":"#MLJModelInterface.predict","page":"Partitioned Least Squares","title":"MLJModelInterface.predict","text":"predict(\n    α::Vector{Float64},\n    β::Vector{Float64},\n    t::Float64,\n    P::Matrix{Int64},\n    X::Matrix{Float64}\n) -> Vector{Float64}\n\n\nResult\n\nthe prediction for the partitioned least squares problem with solution α, β, t over the dataset X and partition matrix P\n\n\n\n\n\npredict(\n    model::PartLSFitResult,\n    X::Matrix{Float64}\n) -> Vector{Float64}\n\n\nMake predictions for the datataset X using the PartialLS model model.\n\nArguments\n\nmodel: a PartLSFitResult\nX: the data containing the examples for which the predictions are sought\n\nReturn\n\nthe predictions of the given model on examples in X. \n\n\n\n\n\n","category":"function"},{"location":"#PartitionedLS.homogeneousCoords","page":"Partitioned Least Squares","title":"PartitionedLS.homogeneousCoords","text":"Rewrites X and P in homogeneous coordinates. The result is a tuple (Xo, Po) where Xo is the homogeneous version of X and Po is the homogeneous version of P.\n\nArguments\n\nX: the data matrix\nP: the partition matrix\n\nReturn\n\nXo: the homogeneous version of X\nPo: the homogeneous version of P\n\n\n\n\n\n","category":"function"},{"location":"#PartitionedLS.regularizeProblem","page":"Partitioned Least Squares","title":"PartitionedLS.regularizeProblem","text":"Adds regularization terms to the problem. The regularization terms are added to the objective function as a sum of squares of the α variables. The regularization parameter η controls the strength of the regularization.\n\nArguments\n\nX: the data matrix\ny: the target vector\nP: the partition matrix\nη: the regularization parameter\n\nReturn\n\nXn: the new data matrix\nyn: the new target vector\n\nMain idea\n\nK new rows are added to the data matrix X, row k in 1 dots K is a vector of zeros except for the components that corresponds to features belonging to the k-th partition, which is set to sqrt(η).  The target vector y is extended with K zeros.\n\nThe point of this change is that when the objective function is evaluated as math Xw - y^2, the new part of   the matrix contributes to the loss with a factor of  η sum w_i^2 . This is equivalent to adding a regularization   term to the objective function.\n\n\n\n\n\n","category":"function"}]
}
