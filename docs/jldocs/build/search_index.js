var documenterSearchIndex = {"docs":
[{"location":"#PartitionedLS.jl","page":"PartitionedLS.jl","title":"PartitionedLS.jl","text":"","category":"section"},{"location":"","page":"PartitionedLS.jl","title":"PartitionedLS.jl","text":"TBD","category":"page"},{"location":"#Package-Features","page":"PartitionedLS.jl","title":"Package Features","text":"","category":"section"},{"location":"","page":"PartitionedLS.jl","title":"PartitionedLS.jl","text":"TBD","category":"page"},{"location":"#Function-Documentation","page":"PartitionedLS.jl","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"PartitionedLS.jl","title":"PartitionedLS.jl","text":"fit\npredict","category":"page"},{"location":"#PartitionedLS.fit","page":"PartitionedLS.jl","title":"PartitionedLS.fit","text":"fit(::Type{Alt}, X::Array{Float64,2}, y::Array{Float64,1}, P::Array{Int,2}; η = 0.0, ϵ = 1e-6, T = 1000, nnlsalg = :pivot)\n\nFits a PartitionedLS model by alternating the optimization of the α and β variables. This version uses  an optimization strategy based on non-negative-least-squaes solvers. This formulation is faster and  more numerically stable with respect to fit(Alt, ...)`.\n\nArguments\n\nX: N  M matrix describing the examples\ny: N vector with the output values for each example\nP: M  K matrix specifying how to partition the M attributes into K subsets. P_mk should be 1 if attribute number m belongs to\n\npartition k.\n\nη: regularization factor, higher values implies more regularized solutions\nT: number of alternating loops to be performed, defaults to 1000.\nϵ: minimum relative improvement in the objective function before stopping the optimization. Default is 1e-6\nnnlsalg: specific flavour of nnls algorithm to be used, possible values are :pivot, :nnls, :fnnls\n\nResult\n\nA tuple of the form: (opt, a, b, t, P)\n\nopt: optimal value of the objective function (loss + regularization)\na: values of the α variables at the optimal point\nb: values of the β variables at the optimal point\nt: the intercept at the optimal point\nP: the partition matrix (copied from the input)\n\n\n\n\n\nfit(::Type{Opt}, X::Array{Float64,2}, y::Array{Float64,1}, P::Array{Int,2}; η=1.0, getsolver=getECOSSolver, returnAllSolutions=false, nnlsalg=:pivot)\n\nFits a PartialLS Regression model to the given data and resturns the learnt model (see the Result section).  It uses a coplete enumeration strategy which is exponential in K, but guarantees to find the optimal solution.\n\nArguments\n\nX: N  M matrix describing the examples\ny: N vector with the output values for each example\nP: M  K matrix specifying how to partition the M attributes into K subsets. P_mk should be 1 if attribute number m belongs to\n\npartition k.\n\nη: regularization factor, higher values implies more regularized solutions (default: 0.0)\nget_solver: a function returning the solver to be used. Defaults to () -> ECOSSolver()\nreturnAllSolutions: if true an additional output is appended to the resulting tuple containing all solutions found during the algorithm.\nnnlsalg: the kind of nnls algorithm to be used during solving. Possible values are :pivot, :nnls, :fnnls (default: :nnls)\n\nResult\n\nA tuple of the form: (opt, a, b, t, P)\n\nopt: optimal value of the objective function (loss + regularization)\na: values of the α variables at the optimal point\nb: values of the β variables at the optimal point\nt: the intercept at the optimal point\nP: the partition matrix (copied from the input)\nsolutions: all solutions found during the execution (returned only if resultAllSolutions=true)\n\nThe output model predicts points using the formula: f(X) = X * (P * a) * b + t.\n\n\n\n\n\nfit(::Type{BnB}, X::Array{Float64,2}, y::Array{Float64,1}, P::Array{Int,2}, η=1.0, nnlsalg=:pivot)\n\nImplements the Branch and Bound algorithm to fit a Partitioned Least Squres model.\n\nArguments\n\nX: N  M matrix describing the examples\ny: N vector with the output values for each example\nP: M  K matrix specifying how to partition the M attributes into K subsets. P_mk should be 1 if attribute number m belongs to\n\npartition k.\n\nη: regularization factor, higher values implies more regularized solutions (default: 0.0)\nnnlsalg: the kind of nnls algorithm to be used during solving. Possible values are :pivot, :nnls, :fnnls (default: :nnls)\n\nResult\n\nA tuple of the form: (opt, a, b, t, P, nopen)\n\nopt: optimal value of the objective function (loss + regularization)\na: values of the α variables at the optimal point\nb: values of the β variables at the optimal point\nt: the intercept at the optimal point\nP: the partition matrix (copied from the input)\nnopen: the number of nodes opened by the BnB algorithm\n\nThe output model predicts points using the formula: f(X) = X * (P * a) * b + t.\n\n\n\n\n\n","category":"function"},{"location":"#PartitionedLS.predict","page":"PartitionedLS.jl","title":"PartitionedLS.predict","text":"predict(α::Vector{Float64}, β::Vector{Float64}, t::Float64, P::Matrix{Int}, X::Matrix{Float64})::Vector{Float64}\n\nResult\n\nthe prediction for the partitioned least squares problem with solution α, β, t over the dataset X and partition matrix P\n\n\n\n\n\npredict(model::Tuple, X::Array{Float64,2})\n\nMake predictions for the datataset X using the PartialLS model model.\n\nArguments\n\nmodel is a Tuple in the form returned by fit functions, it shall contains the following elements:\nopt: the optimal value of the objective attained by the fit function\nα: the values of the α variables\nβ: the values of the β variables\nt: the value of the t variable\nP: the partition matrix\nX: the data containing the examples for which the predictions are sought\n\nReturn\n\nthe predictions of the given model on examples in X. \n\n\n\n\n\n","category":"function"}]
}
